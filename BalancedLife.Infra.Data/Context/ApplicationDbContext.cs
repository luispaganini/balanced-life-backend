// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BalancedLife.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace BalancedLife.Infra.Data.Context;

public partial class ApplicationDbContext : DbContext
{
    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Body> Bodies { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Food> Foods { get; set; }

    public virtual DbSet<ItemsPlan> ItemsPlans { get; set; }

    public virtual DbSet<PlanDiet> PlanDiets { get; set; }

    public virtual DbSet<Snack> Snacks { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<StatusUser> StatusUsers { get; set; }

    public virtual DbSet<TypeSnack> TypeSnacks { get; set; }

    public virtual DbSet<UnitMeasurement> UnitMeasurements { get; set; }

    public virtual DbSet<UserInfo> UserInfos { get; set; }

    public virtual DbSet<UserLevel> UserLevels { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Body>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__body__3213E83F0B1685D1");

            entity.ToTable("body");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Datetime)
                .HasColumnType("datetime")
                .HasColumnName("datetime");
            entity.Property(e => e.Height).HasColumnName("height");
            entity.Property(e => e.IdUser).HasColumnName("idUser");
            entity.Property(e => e.Weight).HasColumnName("weight");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.Bodies)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("body_iduser_foreign");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__city__3213E83F96C813B2");

            entity.ToTable("city");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdState).HasColumnName("idState");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");

            entity.HasOne(d => d.IdStateNavigation).WithMany(p => p.Cities)
                .HasForeignKey(d => d.IdState)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("city_idstate_foreign");
        });

        modelBuilder.Entity<Food>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__food__3213E83FFA8ADDD7");

            entity.ToTable("food");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Carb).HasColumnName("carb");
            entity.Property(e => e.Fat).HasColumnName("fat");
            entity.Property(e => e.IdUnitMeasurement).HasColumnName("idUnitMeasurement");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Protein).HasColumnName("protein");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.IdUnitMeasurementNavigation).WithMany(p => p.Foods)
                .HasForeignKey(d => d.IdUnitMeasurement)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("food_idunitmeasurement_foreign");
        });

        modelBuilder.Entity<ItemsPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__itemsPla__3213E83F066954A3");

            entity.ToTable("itemsPlan");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdFood).HasColumnName("idFood");
            entity.Property(e => e.IdPlan).HasColumnName("idPlan");
            entity.Property(e => e.Quantity).HasColumnName("quantity");

            entity.HasOne(d => d.IdFoodNavigation).WithMany(p => p.ItemsPlans)
                .HasForeignKey(d => d.IdFood)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("itemsplan_idfood_foreign");

            entity.HasOne(d => d.IdPlanNavigation).WithMany(p => p.ItemsPlans)
                .HasForeignKey(d => d.IdPlan)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("itemsplan_idplan_foreign");
        });

        modelBuilder.Entity<PlanDiet>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__planDiet__3213E83F72D6552F");

            entity.ToTable("planDiet");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdNutricionist).HasColumnName("idNutricionist");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");

            entity.HasOne(d => d.IdNutricionistNavigation).WithMany(p => p.PlanDiets)
                .HasForeignKey(d => d.IdNutricionist)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("plan_idnutricionist_foreign");
        });

        modelBuilder.Entity<Snack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__snack__3213E83FC6D4312A");

            entity.ToTable("snack");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Appointment)
                .HasColumnType("datetime")
                .HasColumnName("appointment");
            entity.Property(e => e.IdFood).HasColumnName("idFood");
            entity.Property(e => e.IdTypeSnack).HasColumnName("idTypeSnack");
            entity.Property(e => e.IdUser).HasColumnName("idUser");

            entity.HasOne(d => d.IdFoodNavigation).WithMany(p => p.Snacks)
                .HasForeignKey(d => d.IdFood)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("snack_idfood_foreign");

            entity.HasOne(d => d.IdTypeSnackNavigation).WithMany(p => p.Snacks)
                .HasForeignKey(d => d.IdTypeSnack)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("snack_idtypesnack_foreign");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.Snacks)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("snack_iduser_foreign");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__state__3213E83FCD3E66C3");

            entity.ToTable("state");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__status__3213E83F8753957B");

            entity.ToTable("status");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<StatusUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__statusUs__3213E83FF176B859");

            entity.ToTable("statusUser");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IdNutricionist).HasColumnName("idNutricionist");
            entity.Property(e => e.IdStatus).HasColumnName("idStatus");
            entity.Property(e => e.IdUser).HasColumnName("idUser");

            entity.HasOne(d => d.IdNutricionistNavigation).WithMany(p => p.StatusUserIdNutricionistNavigations)
                .HasForeignKey(d => d.IdNutricionist)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statususer_idnutricionist_foreign");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.StatusUsers)
                .HasForeignKey(d => d.IdStatus)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statususer_idstatus_foreign");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.StatusUserIdUserNavigations)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("statususer_iduser_foreign");
        });

        modelBuilder.Entity<TypeSnack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__typeSnac__3213E83F213FB233");

            entity.ToTable("typeSnack");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<UnitMeasurement>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__unitMeas__3213E83F0B6F18AF");

            entity.ToTable("unitMeasurement");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<UserInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__userInfo__3213E83F2F737ACD");

            entity.ToTable("userInfo");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Birth).HasColumnName("birth");
            entity.Property(e => e.Cpf)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("cpf");
            entity.Property(e => e.District)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("district");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.ExpirationLicence)
                .HasColumnType("datetime")
                .HasColumnName("expirationLicence");
            entity.Property(e => e.Facebook)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("facebook");
            entity.Property(e => e.IdCity).HasColumnName("idCity");
            entity.Property(e => e.IdUserLevel).HasColumnName("idUserLevel");
            entity.Property(e => e.Instagram)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("instagram");
            entity.Property(e => e.IsCompleteProfile).HasColumnName("isCompleteProfile");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Number).HasColumnName("number");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.Sex)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("sex");
            entity.Property(e => e.Street)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("street");
            entity.Property(e => e.UrlImage)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("urlImage");
            entity.Property(e => e.Whatsapp)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("whatsapp");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("zipCode");

            entity.HasOne(d => d.IdCityNavigation).WithMany(p => p.UserInfos)
                .HasForeignKey(d => d.IdCity)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_idcity_foreign");

            entity.HasOne(d => d.IdUserLevelNavigation).WithMany(p => p.UserInfos)
                .HasForeignKey(d => d.IdUserLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("user_iduserlevel_foreign");
        });

        modelBuilder.Entity<UserLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__userLeve__3213E83FBFA99A8F");

            entity.ToTable("userLevel");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}